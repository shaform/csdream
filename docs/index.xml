<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on 資夢</title>
    <link>https://shaform.com/csdream/docs/</link>
    <description>Recent content in Docs on 資夢</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-TW</language><atom:link href="https://shaform.com/csdream/docs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>交大資工相關獎學金、競賽、工讀與實習機會</title>
      <link>https://shaform.com/csdream/docs/nctu-opportunities/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shaform.com/csdream/docs/nctu-opportunities/</guid>
      <description>交大資工相關獎學金、競賽、工讀與實習機會 #  前言 #  學生在求學的過程中，有時會因經濟上的困難，而無法專心學業。為了鼓勵學生讀書，交大設立許多獎學金提供同學申請。除了一般獎學金之外，本文也特別聚焦於資訊領域學生所能獲取的機會，包含競賽等等，期望幫助學生在資訊領域持續深造，而沒有後顧之憂。
獎學金 #  每個學期，在交通大學獎學金系統上都會列出許多獎學金供同學申請，此外，在交大資工的獎學金公告專欄也會列出資工系同學能申請的獎學金。同學可多加注意，本文僅列出一些比較有代表性或者較針對資工的獎學金。此外，由於交大提供學生出國當交換生的機會，而電機、資訊學院自己也有額外的交換生名額，本文也簡單列出幾項出國交換獎學金。
一般獎學金 #  獎學金最主要看的就是在校成績，通常以一學期為單位，一次只能申請一個獎學金。但有些獎學金由於金額較大，所以是以一個學年為單位，視個別規定為主。雖然有一些獎學金有清寒或家境的限制，但也有不限清寒的獎學金，申請前必先詳閱規則。
  潘文淵獎學金 - $25000
這個獎學金在每年的上學期開始申請，僅有資訊、電子、通訊相關科系學生才有資格。由於金額較多，若申請到則下學期也無法申請其他獎學金。
  送珍敦品勵學獎學金 - $50000
本獎學金於上學期申請，資訊學院有一個名額，必須要是大三或大四才符合資格。值得注意的是本獎學金的申請時間有時會比其他獎學金還晚，有可能會發生已經申請上其他獎學金而無法申請的情形。
  林公熊徵學田獎學金 - $100000
本獎學金大約於9月申請，只要是大二以上即可申請。申請方式是由學生自行送件，金額滿高且只看成績而沒有太特殊的要求，值得關注。
  朱順一合勤學業優異獎學金 - $120000
這個獎學金資訊學院有兩個名額，除了看成績外也會參考相關專題成果，只有在大三下可以申請。值得注意的是本獎學金申請後則大四無法申請獎學金，但在大三下是可以和其他獎學金同時申請的（仍需看個別規定為主）。
  資訊學院鄭宇恒獎助學金
這是專給資訊學院的清寒生或單親子女的獎學金，獎助金額照實際審定為主。
  交大六十級校友李岳貞培育獎學金 - $90000
這個獎學金是以補助一年的學雜費為主，唯有清寒生才可申請。
  特殊獎學金 #  除此之外，也有一些不用特別申請就會發放的獎學金，以及一些因特殊目的而設立，或者專注於特殊領域而非單純獎勵整體學業表現的獎學金。其中像是服務義工獎學金等，由於性質特殊，所以可以和一般獎學金並行而不衝突，但仍需視個別獎學金規定為準。
  金竹獎、銀竹奬、銅竹獎 - $200000~$300000
為鼓勵優秀新生，交大也設有大學部新生入學成績優異獎學金，只要入學成績不錯，或擁有特殊表現，就有可能被薦選。通常在正式入學前名單就會公佈，這幾乎是在交大能領取的最高額獎學金，學生可多把握機會。獎學金每學期發放一次，獲選者必須每學期都維持一定排名才能持續領受獎學金，否則無法領完全額。
  書卷獎 - $3000
依班級人數而定，每學期成績名列前茅者可以獲得書卷獎的獎勵，一般而言金額為$3000且不分名次。一般的大學部學生最多可以得到7學期的書卷獎，故最多可以拿到$21000的獎學金。學校會依據成績核定名單，並公告受獎學生。
  核心基礎課程修課獎學金 - $2000</description>
    </item>
    
    <item>
      <title>使用開發工具</title>
      <link>https://shaform.com/csdream/docs/tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shaform.com/csdream/docs/tools/</guid>
      <description>使用開發工具 #  </description>
    </item>
    
    <item>
      <title>創業</title>
      <link>https://shaform.com/csdream/docs/startup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shaform.com/csdream/docs/startup/</guid>
      <description>創業 #  </description>
    </item>
    
    <item>
      <title>參與公益行動</title>
      <link>https://shaform.com/csdream/docs/nonprofit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shaform.com/csdream/docs/nonprofit/</guid>
      <description>參與公益行動 #  </description>
    </item>
    
    <item>
      <title>參與開放原始碼專案</title>
      <link>https://shaform.com/csdream/docs/open-source/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shaform.com/csdream/docs/open-source/</guid>
      <description>參與開放原始碼專案 #  </description>
    </item>
    
    <item>
      <title>取得書籍</title>
      <link>https://shaform.com/csdream/docs/books/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shaform.com/csdream/docs/books/</guid>
      <description>取得書籍 #  網路上的教學雖然很豐富，然而資訊四散於不同的地方，有時也會希望能夠按部就班，一次掌握對於特定知識的所有學問。這個時候，一本好的書籍往往是非常有幫助的。然而，許多的教科書似乎無法輕易取得，或者是價錢昂貴，不免讓人卻步。或者甚至是根本不知道要看那一本書。為了突破此一困境，本文簡單列舉幾項取得教科書的方法。
尋找想看的書 #  如果你想學習特定的程式語言，你可以用語言的名字，配合特定的關鍵字搜尋。例如「python books recommendation」、「python 書籍 推薦」、「python 書 新手」。
如果你想知道資工系的課程用書，則可以去各校的課程網站尋找課程大綱。例如在交通大學課程時間表上，可以查到各學期課程的課綱，其中便有把教科書列出來。資工的課程資訊也有資工四年會修什麼課的資訊。
在這過程中，你或許會發現有很多書籍都是英文寫成。一開始也許會覺得直接看英文版的書會有點挑戰性，但是程式語言和數學的教科書並不會出現許多單字，而一些專有名詞的數量固定，且即使翻成中文也不見得就比較好懂。多看能讓自己慢慢習慣。
大學圖書館 #  要尋找專業書籍，最容易的方法，其實是在大學的圖書館。只是比較不方便的地方在於一般人無法將圖書借出，還有就是，教科書也常會被學生給借走。
然而熟悉一下圖書館的環境還是不錯的，自己的房間其實不是一個適合讀書的好環境，圖書館在你想認真看書時，會是很重要的伴侶。而且有很多大學圖書館不僅館藏豐富，也有不少讀書空間、以及筆電插座，像是交大浩然圖書館就值得好好利用。
如果妳要的書在圖書館裡沒有，妳也可向圖書館推薦購買。在交大，推薦的教科書書多半都會購入，且你還能得到最優先的借閱權力。
市立圖書館 #  一般市立圖書館也有機會找到教科書借閱，不過和大學圖書館比起來少了很多。尤其是英文版教科書，除了一些像台北的大都市外，一般而言館員不會主動進書。不過沒關係，圖書館通常都有設置圖書推薦的服務，建議讀者可以主動推薦想借的書，還是有機會讓圖書館採購的。
書店購買 #  想要購買原文的書，在一般的網路書店，常會需要較高的價格。想訂教科書的最好方法，還是透過大學裡的書店較為妥當，例如交大校內的教科書是由華通書局處理，成大可試試成大圖書部。
除此之外，和電腦相關的原文書，天瓏網路書店上也有不錯的價格。
二手書 #  大學教科用書每年選購的學生很多，而上完課後，會被拋售出來的書也多。因此從二手市場也是取得教科書的好方法。除了價格較低外，一年之後，等有學生又要用到此書時，也相當容易脫手。假設先買了，很快看完，再賣出，實際所花的錢是相當低廉的。
網路上可找到一些拍賣網站：
 讀冊生活 蝦皮拍賣 雅虎拍賣 露天拍賣  每間學校熟悉的拍賣管道各有不同，像是 ptt 站上有 barterbooks 版，但也有一些學校是在 Facebook 上成立買賣社團，可以詢問學長姊看看。
電子書 #  如果有信用卡或 VISA 金融卡等付款管道，透過網路購買電子書也是很方便的作法。如果會擔心眼睛的疲勞的話，可以考慮採購 Kindle 等電子書閱讀器，除了直接跨國購買外，也可以在之前提過的拍賣網站中找到代購的服務。買到了以後，就可以方便的購買並閱讀電子書了。
更多電子書相關議題，也可參閱電子閱讀討論區。
網路資源 #  最後最後的辦法，在網路上找吧。有些出版商會提供有限頁數的預覽，而有些書的作者甚至會把書籍全文直接放在網路上（這種情形的話，主要不是教科書，而是程式設計的書較多。）
幾個適合的起始點：
 Google Books List of freely available programming books Google  結語 #  我們真的非常幸運，在網路上總有數之不盡的教學以及文件，有時即使不看正式的書籍，也能練成一番不錯的能力。網路上的資源可以好好運用，但書上的觀念通常較完整而嚴謹，讀者可慢慢體會各自的好處。</description>
    </item>
    
    <item>
      <title>學習程式語言</title>
      <link>https://shaform.com/csdream/docs/learn-prog-lang/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shaform.com/csdream/docs/learn-prog-lang/</guid>
      <description>學習程式語言 #  Python #  Python 是最容易入手的程式語言之一，也是近來機器學習風潮中最常被使用的語言。
課程 #   Python for Everybody Fundamentals of Computing  書籍 #   Head First Python Programming in Python 3  </description>
    </item>
    
    <item>
      <title>學習英文</title>
      <link>https://shaform.com/csdream/docs/english/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shaform.com/csdream/docs/english/</guid>
      <description>學習英文 #  對於學習資訊科技的人來說，學習英語有顯著而直接的效益。首先，許多的教學、討論和文件都是用英文寫成，掌握好英文讓學習更為方便。其次，和來自世界各地的開發者一同開發專案時，英文常是共通的語言。本文就以實用的角度切入，探討如何掌握英文。
基礎 #  台灣的教育系統讓我們從小就有英語教育，透過學校的資源與要求，通常可以學到基礎的英文。然而如果毫無基礎自行學起究竟該如何是好呢？如果有時間和金錢，當然也可以透過補習班等管道接觸正式的訓練課程。否則的話，就得細心尋找自學資源。首先可以搜尋「初學 英文 site:ptt.cc」、「學英語 網站」，查看網友的討論意見，再計畫自己的時程表。
網路上有些中文的課堂，可以學習英語：
 小風英語教室  此外，也可以考慮到附近的圖書館尋找英語教學書籍，有的書甚至會有附光碟。英語學習雜誌如《大家說英語》等，也是不錯的資源。
如果對英文已經稍有認識，也可以開始搜尋像是「how to learn english」之類的學習資源：
 Duolingo English Grammar  其他一些筆者針對一般性學習英文所撰寫的心得可參考：
 〈千萬別學英語：關於學習、過往、及其它〉 〈這些年的英語路〉 〈終於考了英語口說和寫作測驗〉  從閱讀開始 #  有了英文的基本知識，就可以開始加強自己的能力並實際使用英文來協助資訊科技的學習了。在這個旅途中，最重要也最常使用的能力就是閱讀能力。
字典 #  為了能夠看懂不同的文章，最重要的工具就是字典。其中，又以用英文解釋英文的英英字典對長期學習的幫助最大。雖然一開始可能看完解釋也不懂，但長期就會慢慢習慣。（見：〈這些年的英語路〉）其中最傳統的英語學習字典大約如下，在 George Chen 的網誌裡有不少評析。這些字典可以在書局裡購買，或從二手市場取得。注意到根據國內書商是否有代理的不同，價格上可能會有很大差異。
 《Longman Dictionary of Contemporary English》 《Cambridge Advanced Learner&amp;rsquo;s Dictionary》 《Collins COBUILD Advanced Learner&amp;rsquo;s English Dictionary》  除此之外，也有許多線上版、或行動版的字典可供使用：
 COBUILD Advanced Learner&amp;rsquo;s English Dictionary Oxford Learner&amp;rsquo;s Dictionaries Cambridge Dictionaries Online Dictionary.</description>
    </item>
    
    <item>
      <title>密碼學概論</title>
      <link>https://shaform.com/csdream/docs/intro-to-crypto/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shaform.com/csdream/docs/intro-to-crypto/</guid>
      <description>密碼學概論 #  前言 #  密碼學概論是交大資工大三的課程，課程的主題，Cryptography，旨在探討加密背後的數學原理，如何在第三方可以攔截或假造訊息的情況下，加密訊息以保證僅有信任的人可以得知真正的內容。也會討論延伸的議題如 digital signature, secret sharing 等等。歷年來使用的課本不一，筆者建議可以從《An Introduction to Mathematical Cryptography》開始讀起，也可參考：〈Books on Cryptography〉。一部分使用的數學工具如中國餘式定理等等在〈離散數學〉已有提及。
簡介 #  這堂課一開始會先簡介古典的各種加密法如字母代換，並說明為何這種加密法可以透過簡單的分析破解。接下來，開始建立基本的數學基礎，包含：
 Modular Arithmetic Finite field Chinese Remainder Theorem Legendre symbol Jacobi symbol  接下來，便從基本的 Symmetric-key algorithm 概念開始講起，在此種加密法中，訊息的發送者與接受者使用同一把密鑰來加密與解密，其他人若沒有此鑰匙，便無法輕易解出內容。
除了介紹 stream ciphers, block ciphers 等兩種主要分類外，也會介紹幾種目前常見的加密法：DES, AES。
然而，此類加密法衍生出一個問題：如果無法安全的傳遞訊息，那麼那把共享的密鑰，一開始究竟要如何交給你要傳送訊息的對象呢？以此問題為開端，延伸出了一個新的概念：Public-key cryptography，在此類加密法中，人們通常可以透過一個公開的公鑰加密訊息，可是這加密的訊息卻只有透過與公鑰相對應的私鑰才能解開。所以只要公佈你的公鑰卻保留妳的私鑰，則任何人都可以加密，但卻只有妳可以解密。其中最著名的例子或許就是 RSA。
即使在加密法、解密法和公鑰都已知的情況下，攻擊者仍無法輕易的解出私鑰或者加密的內容，這樣特別的數學性質，便是接下來討論的重點。
 Factorization Primality test Discrete logarithm Hash function  最後還有碰觸到許多延伸課題：
 Digital signature Blind signature Pairing-based cryptography Elliptic curve cryptography  其他 #  在這堂課裡，也會自己實做各種加密法的程式。筆者將實做 RC4 及 SHA-1 的程式碼放在 @nctu-crypto-100，可供參考。</description>
    </item>
    
    <item>
      <title>尋找目標</title>
      <link>https://shaform.com/csdream/docs/goal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shaform.com/csdream/docs/goal/</guid>
      <description>尋找目標 #  23 歲的 Erin Parker 某天突然決定參加 RailsBridge 聚會，主修經濟的她，沒碰過程式，但在聚會中，她學著用 Ruby on Rails 開發了簡單的小網站。這樣的經驗讓她覺得非常愉快。同時，這也在她心中種下一個種子。
她突然有了個夢想，想做一個網站鼓勵女子如何健身、舉重、如何吃的更健康。雖然腦中的設計愈來愈清晰，可是不懂寫程式的她真的可能做到嗎？最後她決定放手去做了，因為就算失敗，至少曾經嘗試過。她利用網路上所有找得到的資源開始自學 Ruby on Rails，同時參與許多程式聚會，不斷問問題，只為了達成心中想要的目標。
最後她做出了網站，介紹給朋友，然後轉移到手機平台，開始學習 iOS 程式開發。她為了真的有人在使用她的程式而感到興奮。在 2014 年，她的成果登上了 iPhone App Store 首頁，被選為最佳新 App 之一，擁有數萬使用者。
於是當有人在 Quora 上詢問 24 歲才開始學程式會不會太晚時，Erin 告訴他：「永遠不會太晚」，「我希望我的回答可以激勵讀者去學習寫程式，並把妳熱愛的事物轉成現實。因為當你創造一個有數萬使用者喜愛的東西，那種成就感是難以形容的。」
時常你會聽年輕的開發者說，他們懷抱著改變世界的夢想。這樣的熱情絕非偶然，而是資訊科技的魅力使然。
 豐富的學習資源  網路上和書店裡可以找到的資源會讓你驚訝。無數的免費線上課程與教學，還有留言板上許多朋友一起討論和解決問題的對話紀錄，這些都是良好的導師。由於不需要去特殊的訓練所就能開始自學，這使得任何人都有機會學會怎麼寫程式。
 只要有一台電腦就可以馬上開始開發，快速傳播並帶來影響  如果你想建一台車或一個房子，你可能得擁有龐大的資金來購買許多材料。可是只要有一台電腦，就可以開始寫程式。而用那麼少成本所做出來的程式，卻有可能透過網路接觸到全世界的人。
 透過眾人的累積形成巨大力量  數不清的程式設計師將他們的成果放在網路上互相分享，每個人都可以站在前人的肩膀上，組合出更好的軟體。每一次修改程式時，總會覺得又進步了一點。每完成一個小成就，就更接近目標。不同的協作工具讓眾人合作的成本降低，使得創造龐大的專案變得有可能。
正因為這些原因，使得資訊科技成為最低門檻、最快促成改變的工具。
改變教育 #  資訊科技正全面改變人們受教育的方式。MIT 發起開放式課程計畫，讓所有人可以透過網路取得課程資料。Coursera 的創辦人之一，Daphne Koller 告訴我們線上教育可以做到許多事。原本只有 400 名學生的大學課程，改放在網路上就可能接觸到 10 萬名以上的學生，這樣的影響力是前所未見的。原本因為有限的資源以致只有少數人能接觸高等教育，但透過資訊科技，我們有了新的可能。而未來，軟體程式將會讓每個人可以根據自己的學習進度來接受個人化教育。
在台灣，交通大學首先響應開放式課程，將課堂錄影開放到網路上，其後開放式課程聯盟成立，有愈來愈多的大學將自己的課程開放出來。2013 年，台大在 Coursera 上開課，來自全世界的學生都可以參與課程。
改變社會 #  資訊科技可以實現一個更開放、透明、鼓勵參與的政府，Code for America 號召公民撰寫程式改進政府效能，創始人 Jennifer Pahlka 在 TED 上告訴我們，可以用程式打造更好的政府。</description>
    </item>
    
    <item>
      <title>微處理機系統實驗</title>
      <link>https://shaform.com/csdream/docs/micro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shaform.com/csdream/docs/micro/</guid>
      <description>微處理機系統實驗 #  前言 #  微處理機系統實驗是交大資工大三上的課程，在這門課中，學生將會撰寫在 microcontroller 上執行的程式，利用實驗版或甚至麵包版，實際使單晶片和環境互動。所謂的 microcontroller，指的是把中央處理器、記憶體、各種輸入出介面等等都整合在一起的小型計算機。雖然計算能力沒有一般電腦的 CPU 好，但體積小而便宜，被運用在簡單的嵌入式系統中。這堂課使用的微處理機為 8051，使用的語言主要為 8051 的組合語言，但有些班也可能使用 8051 C 來做更複雜的操作。
在課程中將會操作許多的輸出入，包含按鍵、開關、數字鍵盤、透過光敏電阻與熱感電阻配合 ADC 讀取環境的值。或者是 LED 燈、七段顯示器、點矩陣顯示器的輸出，控制馬達、蜂鳴器，甚至是利用 RS-232 和電腦溝通等等。
筆者的期末專題是一個搶答遊戲，利用 RS-232 從電腦終端機顯示題目，兩個玩家透過按鍵搶答，答對時玩家的四驅車會前進，誰先到達終點即獲勝，題目中也有利用蜂鳴器來實做的猜歌題。也有同學是做打地鼠遊戲。
學習資源 #  這堂課為重實做的課程，練習絕不可少。而讀者若有學過「組合語言與程式程式」，8051 的環境細節與組語的內容其實不深，很快就能進入狀況。讀者可以參考《The 8051/8052 Microcontroller》裡 8051 與組語的基本介紹。或者另外一本《The 8051 Microcontroller》有更全面的教學及練習題。對於 8051 C 的部份，和原始 C 的差別其實不大。讀者可參考：《Embedded C》。而市面上也可找到不少以實做為導向的單晶片中文書籍。
網路上也有不少教學資源：
 Architecture and Programming of 8051 Microcontrollers 89S52 microcontroller quick tutorial 8051 教材資源  環境 #  開發環境可以使用 Keil C51 µVision IDE，不管是組語或者 C 都可以組/編譯。如果你使用 Linux 系的作業系統，也可以使用 MCU 8051 IDE，不過需注意兩者語法稍有不同。另外一個和 MCU 8051 IDE 語法類似且在 Windows 上使用的是 MIDE-51。其中，Keil C 是多數書籍主要使用的開發環境，但免費版對程式大小有些許限制，另外兩個 IDE 則無。</description>
    </item>
    
    <item>
      <title>搜尋資源</title>
      <link>https://shaform.com/csdream/docs/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shaform.com/csdream/docs/search/</guid>
      <description>搜尋資源 #  在這個旅程中，搜尋將會是一個很重要的能力。這份教材的篇幅無法涵蓋所有的學問，但透過網路能夠取得豐富的學習資源。而這些資源，很難全部讀完，因此得透過搜尋找出其中想要的資訊。懂得搜尋，就不再受到教材的侷限，而可以自己找出學習的路。而有時遇到一些難解的問題時，身邊的人都沒有經驗，你也沒有時間仔細鑽研，但這個世界這麼大，很可能有另一個人遇過同樣的問題，並把解法寫在網路中的一篇文章。此時只要能找到那篇文章，眼前的難題就能迎刃而解。
搜尋引擎 #  想要尋找網路上的文章，最常使用的就是搜尋引擎，所謂的搜尋引擎，指的是可以讓妳尋找網路上資源的一種系統，例如：
  Google (en)
萬用搜尋引擎，若想搜尋英文資料，使用英文版 Google 通常能得到較好的結果。尤其程式語言的資訊在網路上多以英文居多，Google 為必備網站之一。
  Google 中文
中文版 Google，搜尋中文資料時可以使用。
  Bing
微軟開發的搜尋引擎。
  Yandex
俄國的搜尋引擎。有時因為一些原因，可能使用不同國家的搜尋引擎比較容易找到想要的結果，這時就能試試看。
  更多的搜尋引擎列表可參考：〈List of Search Engines〉。
搜尋引擎的最基本原理，是使用輸入的「關鍵字」和文件中的文字配對，以找出最相關的結果。所以，通常如果要找出一個問題的答案，應該要輸入答案文件中可能出現的字，而不是問題本身。例如，如果你想問的問題是：「要怎麼學程式設計？」，那麼你可能要用兩個關鍵字來搜尋：「程式設計 教學」。如果想問的問題是：「交大校長是誰？」，那可能就得用：「交大 校長」來搜尋。
當然，有時候網路上會有人在討論區問了一個問題和其他人討論，並一起研究不同的答案。此時搜尋問題的標題，也有可能找到這種討論文章以及其中的答案。例如搜尋「我應該讀理科嗎」。就很有可能會找到在人生中徬徨的朋友發問，和眾人熱心的回答。
由於搜尋技巧的優劣，常會決定能不能快速找到有用的資源，但搜尋技巧的培養，有部份只有透過經常搜尋才會慢慢找到感覺。所以在本教材的不同課題中，會明確指出想搜尋某些議題時可以用哪些關鍵字，並用「」標示，直接連結到搜尋引擎，筆者也鼓勵讀者可以多嘗試不同的關鍵字組合，看看會有什麼結果。
更詳細的教學可以搜尋「搜尋技巧」，以及下列文章，本章節接下來則會列舉幾個情境當實際的例子，其中如果有看不懂的名詞不要在意，重點在於使用的方法。
 各種 Google 搜尋引擎的使用方式與技巧 Google 搜尋技巧教學 Get More Out of Google Google Guide A Google a Day  搜尋教學資源 #  要搜尋教學，通常只要配合幾個關鍵字就可以達到目的。例如，你想學習 Python （一種程式語言），則可嘗試以下關鍵字：
 「python tutorials」 「python books recommendation」 「python books」 「python guide」 「python ebooks」 「learn python」 「python documentation」 「學 python」 「python 教學」 「新手 python」 「python 書」 「python 教材」 「python hello world」  又例如你想學習 Deep Learning，的話，也可試試以下關鍵字：</description>
    </item>
    
    <item>
      <title>數位電路實驗</title>
      <link>https://shaform.com/csdream/docs/dlab/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shaform.com/csdream/docs/dlab/</guid>
      <description>數位電路實驗 #  前言 #  數位電路實驗是交大資工大二下的必修課程，接續大二上的數位電路設計，這門課是教如何利用 Verilog 硬體描述語言來設計數位電路。語言本身並不複雜，和 C 也非常類似，主要會用到的部分很快就會學完。在數位電路設計課程使用的《Digital Design》一書中便有硬體描述語言的章節，其中有許多不錯的習題可供練習。此外，十分推薦《Verilog HDL》這本書，對 Verilog 語言有非常清楚的講解。要小心注意的是，Verilog 是用來描述硬體的語言，有些寫法，雖然語義沒問題，但卻無法合成為實際的電路，或者是會因為訊號輸入不穩還是訊號延遲而產生奇怪的問題，Verilog 並非程式語言，這是數位電路實驗這門課裡最需注意的部份。若想對 Verilog 合成的議題有更深的了解，可以參考《Verilog HDL Synthesis, A Practical Primer》這本書。此外，XST User Guide 也是合成電路時值得參考的文件。網路上的教學文件可參考：WORLD OF ASIC。
環境 #  筆者的班是使用 Xilinx ISE 這套工具來模擬和設計電路，可以在官方網站上下載這套軟體，還有另一個班是使用 NCVerilog 來跑模擬，不過若要將電路實際合成到 FPGA 上時，使用的都是 Xilinx ISE。如果你是使用 Linux，你也可以嘗試使用 Icarus Verilog 來模擬，參考：Verilog @ Linux using Icarus Verilog。
筆者當年使用的 FPGA 板是 Xilinx XC3S500E FG320，其上有數個開關、LED 燈、還有螢幕 VGA 、滑鼠、鍵盤等接頭。Verilog 模組透過和開發板上接頭的互動，可以讀入鍵盤、滑鼠的輸入，也可以輸出畫面到螢幕上。實驗課所寫的內容包括抽牌比大小的遊戲（用 LED 燈顯示大小）、以及用螢幕顯示的圈圈叉叉和打磚塊遊戲等等。這些輸出入背後的原理可參考《FPGA Prototyping Using Verilog Examples》，開發板取得不易，若有興趣或可參考〈Xilinx Spartan-3E Starter Kit的基本裝備 〉。</description>
    </item>
    
    <item>
      <title>正規語言概論</title>
      <link>https://shaform.com/csdream/docs/fl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shaform.com/csdream/docs/fl/</guid>
      <description>正規語言概論 #  前言 #  正規語言概論是交大資工大三上的必修課程。這門課的課題是基礎的計算理論，研究什麼是電腦的能力和極限。介紹各種計算模型，例如 DFA, NFA, PDA, Turing machines 等等，以及其相對應的正規語言，如 regular languages, context free languages, Turing-decidable languages 等等。也會探討問題間的 Reduction 以及問題的 Complexity 等等。
系上使用的教科書主要是《Introduction to the Theory of Computation》不過也有老師使用《Introduction to Automata Theory, Languages, and Computation》。
簡介 #  透過計算模型，我們可以對計算定下明確的數學定義。而一旦有了明確的定義，便可以研究什麼是可計算的、什麼是不可計算的，而對於可計算的問題，必須花費多少時間和空間才可能計算。
Church–Turing thesis 指出，所有演算法可解的問題，都可透過 Turing machines 求解，也因此，藉由研究 Turing machines 我們得以探討電腦的極限，以及對各種問題的難度訂出明確的界線。
這是一門非常理論與數學的課，需要非常清晰的邏輯思考。老師曾說，資訊界日新月異，許多課程可能幾年後就不見了，或者教的東西大幅改變。但你幾乎可以確定，正規語言這門課還是會一直存在。從哲學的角度來說，計算理論在電腦科學裡佔了十分核心的地位。
正規語言課程所學的東西其實也有很多延伸的應用，以至於很多讀者很可能早已接觸過某些部份，但直到這門課，才真正以嚴謹的方式學習背後的來歷。像是如果有接觸像 Python 等語言或者用過 Vim 等編輯器的搜尋功能的讀者，很有可能有接觸過正規表示式。而 CFG 和程式語言的設計以及編譯器等課程有密切相關，你或許會曾在程式語言的文件上看過他。如果在演算法等課程聽過 NP、P 等名詞，在這堂課裡，你可以學到這些名詞到底有什麼含意。而對什麼是演算法，時間複雜度、問題的可計算性等等，都會在這堂課得到更深的理解。
學習小指引 #  課本本身寫的很好，建議將《Introduction to the Theory of Computation》研讀數遍，並配合書中練習題。
參考 #   Computability and Complexity Automata, Computability, and Complexity Regular Expression (RegExp) in JavaScript  </description>
    </item>
    
    <item>
      <title>當個軟體工程師</title>
      <link>https://shaform.com/csdream/docs/software-engineer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shaform.com/csdream/docs/software-engineer/</guid>
      <description>當個軟體工程師 #  實習 #   海外實習面試記 Google Interview 〈從台灣申請北美軟體工程實習 – 準備篇〉 〈從台灣申請北美軟體工程實習 – 面試篇〉 〈從台灣申請北美軟體工程實習 – 出發篇〉  以下蒐集一些依地區分類的工作機會：
台灣 #   Inside Job Board Soft Job 66K 工作網  美國 #   如何在台灣找美國的工作 台灣找美國工作分享  加拿大 #   加拿大工作經驗分享  歐洲 #   歐洲CS全職面試經驗分享  荷蘭 #   booking.com 面試工作心得  德國 #   分享德國資訊業生活實況  紐西蘭 #   紐西蘭IT就業心得  新加坡 #   軟體工程師 到 新加坡工作  日本 #   30歲工程師去日本找工作 Looking For A Developer Job In Japan?</description>
    </item>
    
    <item>
      <title>程式語言</title>
      <link>https://shaform.com/csdream/docs/prog-lang/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shaform.com/csdream/docs/prog-lang/</guid>
      <description>程式語言 #  前言 #  程式語言是交大資工大二的必修課程(自101學年後已非必修)，使用的課本為《Concepts of Programming Languages》。在這堂課中，會概略討論程式語言設計的原則，並簡單介紹程式語言發展的歷史以及設計程式語言的原理，包含語言的語法以及各種程式結構與特性的實做方式等等。值得注意的是這堂課並非學習使用程式語言的入門課程，而是探討程式語言背後的設計原理。而學生若先擁有寫程式的經驗也能對課程擁有較好的理解。
課程內容 #  課程主題主要可分為三個大項，第一是語言的格式和語法。例如敘述語言 Syntax 的 Context-free grammar、BNF，還有用分析算術運算式為例子介紹 Lexical Analysis 和 Parsing 等概念。這部份在正規語言概論和編譯器設計概論課程中也會再次提到。
第二則是根據設計程式語言時會遇到的幾項課題，比較各種不同設計的優缺點、實做的方法，以及提一些實際語言的例子。
 Variable, 包含命名、範圍等等。 Data type Expression Control flow Subroutine, 參數傳遞、Call stack 等等。 Abstract data type Concurrency Exception  最後則是介紹程式語言的幾種不同設計哲學：
 Imperative programming Object-oriented programming Functional programming Logic programming  程式語言 #  許多語言設計的精神如 functional languages，和常用的程式語言有很大不同。若能實際嘗試使用語言，常能獲得較深的理解，所以有些老師也會讓學生實際學習使用其中的一兩種語言，以下便條列幾個較知名的程式語言：
 Python：十分易學且易讀的程式語言，同時也受到廣泛運用。除了擁有 imperative 和 object-oriented 的特性之外，也有一些 functional programming 功能。網路上的教學資源非常的多，如：The Python Tutorial、Python 教學 Java：廣受使用的 objecti-oriented 語言，可參考 The Java Tutorials、書籍推薦《Head First Java》。 Haskell：純粹的 functional programming language，可參考 Haskell Introduction 的介紹。網路上也有優質的學習資源：Learn You a Haskell。 Prolog：相當知名的 logic programming language。 C/C++：在交大資工課程中最常使用的語言。  參考 #   Why Study Programming Languages?</description>
    </item>
    
    <item>
      <title>累積基礎知識</title>
      <link>https://shaform.com/csdream/docs/basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shaform.com/csdream/docs/basic/</guid>
      <description>累積基礎知識 #  </description>
    </item>
    
    <item>
      <title>組合語言與系統程式</title>
      <link>https://shaform.com/csdream/docs/asm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shaform.com/csdream/docs/asm/</guid>
      <description>組合語言與系統程式 #  前言 #  組合語言與系統程式是交大資工大二的必修課程，使用的課本有兩本：
 《Assembly Language for x86 Processors》 《An Introduction to Systems Programming》  組合語言部份一開始是簡介 x86 電腦的基礎架構，然後就是學習組合語言的撰寫。組合語言和機器語言有直接對應的關係，是非常基層的程式語言。
系統程式的重心主要放在組譯器上，以書中提出的簡易 SIC 組合語言為例，解釋組譯器如何將組合語言翻譯成可執行的機器語言，也有可能教到 Linker 和 Loader。
學習資源 #  這門課所使用的組語教科書在每章背後都有程式練習題，建議自修時可以一題一題的寫，一定會收穫良多。系統程式雖然教的是普遍的概念，但是所使用的 SIC 架構是《An Introduction to Systems Programming》這本書提出的，所以最好能直接看教科書，筆者在修這堂課時寫了一個簡易的 SIC/XE 組譯器，認為實做確實能加深對課本的理解。
組語的學習資源還可以參考
 x86 Assembly 小木偶的網頁 PC Assembly (NASM 格式)  這門課的組譯器主要是使用 MASM，由於不同組譯器有不同格式的寫法，若想為這門課做準備，得稍微注意，建議直接買課本來看。但 x86 的指令集是通用的。
為了學習的方便，一些像是印出字元的函式皆由書中搭配的函式庫 Irvine 提供，詳細的設置方法以及下載處可至作者網站查詢。
環境設定 #  作者的環境設定法是使用 Microsoft Visual Studio，使用專業版或可免費下載的簡易版皆可，若你是交大的學生，可參考國立交通大學校園授權軟體服務網取得專業版下載。
即使你不想使用 Visual Studio 來撰寫組語，安裝它仍是取得 MASM 最方便的方法，以下提供一個簡易的組譯環境設置法：</description>
    </item>
    
    <item>
      <title>維持身體健康</title>
      <link>https://shaform.com/csdream/docs/health/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shaform.com/csdream/docs/health/</guid>
      <description>維持身體健康 #  前言 #  為了走得長遠，健康也是不可不注意的一環。而長時間進行軟體工作，不免會遇到一些健康問題，本文就來探討一些改善的方案。
視力 #  為了保護視力，首先就是要提醒自己常常休息，有一些軟體可能可以幫忙提醒：
 Time Out SafeEyes Workrave  除此之外，使用藍光眼鏡可能也能減輕眼睛的負擔。或者也能用一些軟體直接減少螢幕的藍光：
 Redshift f.lux  滑鼠手 #  或許可以考慮使用垂直滑鼠或者軌跡球來降低滑鼠手的可能性。
姿勢不良 #  長期使用電腦姿勢不良的話往往會對頸椎之類的地方造成負擔，產生頭痛無法集中精神等等複雜的狀態。為了降低這種狀態，也有不少產品可考慮，例如垂直升降桌可以讓你偶爾站立偶爾坐著使用電腦，筆電架可幫助避免低頭使用筆電造成的負擔。
對於一些姿勢不良可能造成的危害和復健的運動可以參考 Stop Headache, Neck Pain and Bad Posture。
此外也能看看網友十分推薦的伸展聖經，坐著太久就起來做做伸展。</description>
    </item>
    
    <item>
      <title>練習程式解題</title>
      <link>https://shaform.com/csdream/docs/problem-solving/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shaform.com/csdream/docs/problem-solving/</guid>
      <description>練習程式解題 #  前言 #  程式解題，指的是利用寫程式來解決一些特定的程式題目。這些題目通常會指定特定的輸入，而要求程式輸出特定的輸出。例如像是輸入一張地圖的表示，以及起點和終點的表示，則程式必須找到從起點到終點的最短路徑，並將結果輸出。
這類問題也是資訊能力競賽、資訊奧林匹亞、大學程式設計先修檢測、大學程式能力檢定、ACM 大學生程式競賽等等的標準考題。就算是進入職場，許多面試也會要求應試者在白板上現場解類似的題目，可說是資訊界最基礎的練習問題也不為過。
基礎 #  程式解題的題目除了需要對使用的語言有一定的嫻熟度外（特別是在處理輸出入時），有時也會用到演算法。
學好一個程式語言的方法無他，便是需要大量的練習。為了掌握語言的細節，最好是能至少完整看完一本介紹的書。如果要自修 C 的話，推薦 《C Programming: A Modern Approach》，這本書的筆調清晰，十分易讀。
C++，一般都推 《C++ How to Program》。一天看個幾十頁，不到一個學期就能看完。接下來再透過寫題目來磨練自己的技巧，就能不斷進步。
演算法的部份，如果要看正式的教科書的話，學校用的是 《Introduction to Algorithms》。另外,推薦一本比較小本，《Algorithm Design》 感覺挺適合入門。
當然，實際上直接動手解題也可以。很多深入的演算法其實並不會在題目中見到，有時反而是要一點小聰明。
網路上也能找到一些程式設計的入門教學，在此枚舉幾項：
 C Gossip 演算法筆記  Timus Online Judge #  以下就介紹其中一個 Online Judge 題庫網的使用方法。
Timus Online Judge 是俄國 Ural 大學設立的程式線上測驗網站，有許多程式題目可供大家練習。他支援 C++ / Java / Python / Ruby / Go / Haskell / Pascall / Scala 等等多種語言，而且網站速度滿快的，還有貼心的題目難易排行。進入 http://acm.</description>
    </item>
    
    <item>
      <title>計算機概論與程式設計</title>
      <link>https://shaform.com/csdream/docs/intro-to-cs-and-prog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shaform.com/csdream/docs/intro-to-cs-and-prog/</guid>
      <description>計算機概論與程式設計 #  前言 #  計算機概論與程式設計是交大資工大一的必修課程。它和一般系的計算機概論比較不同，主要的重點放在程式設計上。而真正簡介各項議題的則是大一下的「計算機科學概論」。
以帶領學生入門程式設計為目的，其實這門課主要核心便是學習 C 語言。因為老師的不同，也可能會學一點 C++ 或者 Java。使用的教科書主要是《C: How to Program》以及《C Programming: A Modern Approach》，尤其後者筆者非常推薦。
這堂課每週時數為六節，有三節是上課，還有三節是在晚上的上機課。 以筆者的上課情形為例，上課時，老師都是用投影片講解。而每週的上機課，是先由助教講解當週要派的程式作業，然後就是同學自由寫程式時間。在下課前，必須找助教 demo 並繳交上禮拜派的作業。那時共有 9 個作業。
像這樣有獨立上機課的課程不多，除了一些要用到特殊硬體的實驗課外，在大二以後，作業多半會直接派出，再另外約時間 demo 或者直接繳交。在大一上，這是唯一的一堂程式課，也是未來許多課的基礎。若是沒有學好 C，在往後的程式課會相當不利。
考試的形式是紙筆測驗，也有寫程式的上機考。
環境 #  在撰寫 C 程式之前，需要先準備好開發環境，這裡推薦使用 Code::Blocks，可參考〈Code::Blocks 10.05 – 能夠媲美Dev C++的C/C++編譯器,跨平台(Ubuntu、Windows、Mac)〉的介紹。
基礎 #  筆者建議大家一定要實際拿本書來看，有許多語言的細節唯有透過完整閱讀才能慢慢理解。尤其 C 語言剛好有一本語調清晰、很適合入門者的書：《C Programming: A Modern Approach》，如一位學長所推薦：〈C語言的專用書推薦 C Programming: A Modern Approach〉，即使是不太習慣看英文書的同學，也可以從這本書開始。
在大學裡，資工系的教科書幾乎都是英語寫成，而教授上課使用的講義和投影也多為英文。能夠早點習慣閱讀英文書，會成為學習上很大的優勢。
網路上也有許多資源可供參考：
 C Gossip C Programming  要學好程式，練習是非常重要的。基礎打好後，接下來最適合的練習就是程式解題了，相關課題可以參考〈基礎程式設計〉。做程式解題除了可以增加自己對語言的熟悉度外。更重要的是，培養自己的邏輯能力以及敏銳度。否則有時為了寫出簡單的功能，卻用了複雜的方法，往往讓程式長度變得很長，在寫作業和上機考時都相當不利。
小記 #  若你使用系上的工作站來撰寫程式的話，也可能會使用 Vim, GCC, GDB 等工具。相關介紹可以參考：</description>
    </item>
    
    <item>
      <title>認識同好</title>
      <link>https://shaform.com/csdream/docs/friends/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shaform.com/csdream/docs/friends/</guid>
      <description>認識同好 #  活躍的技術社群是大家交流點子與認識同好的好地方。除了網路上有許多虛擬社群交流知識外，也有許多實體聚會。如果你是學生的話，還可以參加校園裡的資訊社團，甚至和同學一起組成讀書會。想加入這些聚會，可以到一些活動網站上尋找相關訊息：
 活動通 Meetup KKTIX 臺灣 自由/開放 軟硬體 社群列表  或者也可以用不同的關鍵字搜尋：
 「台灣 軟體社群」 「台灣 程式社群」 「Python 讀書會」 「AI 讀書會」 「台南 Python」 「Rails 工作坊」  以下蒐集一些依地區分類的「實體」聚會/研討會/工作坊/社群：
台北 #   Python  Taipei.py PyLadies @ Taiwan Django Girls   Ruby on Rails  Rails Girls Taipei Rails Meetup   PHP  PHP 也有 day   Open Source  台灣女子自由軟體工作小組 Hacking Thursday   Functional Programming  Functional Thursday   Taiwan R User Group Golang Taiwan Android Taipei Taiwan Java User Group Front-End Developers Taiwan HackerNest Taipei Tech Socials Google Developer Group Taipei  花蓮 #   花蓮.</description>
    </item>
    
    <item>
      <title>讀資工系</title>
      <link>https://shaform.com/csdream/docs/cs-degree/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shaform.com/csdream/docs/cs-degree/</guid>
      <description>讀資工系 #   SENIORHIGH studyabroad thegradcafe Online Studies  </description>
    </item>
    
    <item>
      <title>資工系開放式課程資源</title>
      <link>https://shaform.com/csdream/docs/ocw/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shaform.com/csdream/docs/ocw/</guid>
      <description>資工系開放式課程資源 #  自從 MIT 開啟開放式課程計畫後，OpenCourseWare 的風潮開始影響全世界。交通大學也是國內第一個加入開放式課程計畫的學校。其後，更和其他學校共同成立了台灣開放式課程聯盟。
麻省理工的開放式課程網頁內容十分豐富，有幾項資源特別值得注意：
 大綱、進度表 影片 作業 課業討論區  透過進度表，可以了解整個課程各部份所需付出的心力，讓你更容易安排自己的學習進度，而上課錄影對於習慣聽講的人真的幫助良多，作業可以讓你有效的檢驗自己學到的東西，而事實上人們在有反饋的時候學習效果也確實較好。更多介紹可參考：Get Started with OCW。
以下蒐集一些和資工課程有關的 OCW 資源，也歡迎讀者提供連結。
 微積分  Single Variable Calculus Multivariable Calculus 微積分(一) 微積分(二)   物理  Physics I: Classical Mechanics Physics II: Electricity and Magnetism Physics III: Vibrations and Waves 物理(一) 物理(二)   計算機概論與程式設計  Introduction to Computer Science and Programming Practical Programming in C   線性代數 物件導向程式設計  Introduction to C Memory Management and C++ Object-Oriented Programming   計算機科學概論  Introduction to Computer Science I The Beauty and Joy of Computing   離散數學  Mathematics for Computer Science 離散數學   資料結構  Data Structures Data Structures   數位電路設計  數位電路設計 Digital Circuit Design   程式語言  Programming Languages Programming Languages and Compilers   電路與電子學  Circuits and Electronics   機率  Probabilistic Systems Analysis and Applied Probability Introduction to Probability and Statistics Probability   演算法概論  Introduction to Algorithms Introduction to Algorithms Advanced Algorithms   數位電路實驗  Introductory Digital Systems Laboratory   組合語言與系統程式 資料庫系統概論  Database Systems   計算機網路概論  計算機網路概論   正規語言概論  Automata, Computability, and Complexity   作業系統概論  作業系統 Operating Systems and System Programming    計算機組織  計算機組織 計算機架構 計算機架構（英語授課) 計算機結構 Computer System Architecture   機器學習  機器學習基石 Machine Learning Machine Learning   密碼學概論 微處理機系統實驗 編譯器設計概論  Computer Language Engineering   人工智慧概論  Artificial Intelligence   微分方程  Differential Equations Differential Equations   數值方法  Introduction to Numerical Methods   數理邏輯 訊號與系統  Signals and Systems   組合數學 統計學 嵌入式系統設計概論與實作  嵌入式系統概論與實做 嵌入式系統概論 Introduction to Embedded Systems   軟體工程概論 網路程式設計概論 區域網路及通信原理  區域網路   無線網路概論 電腦安全概論 網際網路規約 計算機圖學概論  Computer Graphics   影像處理概論 數位訊號處理概論 多媒體資訊系統導論 圖形識別概論 多媒體壓縮概論 類神經網路概論 電腦動畫概論  相關連結 #   MIT OpenCourseWare Coursera.</description>
    </item>
    
    <item>
      <title>資訊工程專題</title>
      <link>https://shaform.com/csdream/docs/cs-project/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shaform.com/csdream/docs/cs-project/</guid>
      <description>資訊工程專題 #  前言 #  資訊工程專題是交大資工的必修課程之一，專題的目的是讓學生根據自己所學，以一個特定主題進行研究。要通過這門課主要分為兩個部份：首先是尋找指導教授並進行研究，其次則是分兩個學期選修「資訊工程專題（一）（二）」等課程，並得到學分。
尋找指導教授與研究主題 #  根據指導教授和題目的不同，大家做的東西差異也很大。筆者看過有的人做很複雜的數學加密演算法；有人觀察腦波、研究情緒，也有人是做手機應用 App，也有圖形辨識、3D 變形等等。
在結束專題之後，筆者感覺，如果有志攻讀研究所的話，在決定專題時就先開始思考未來的研究方向會是一件好事。這麼做可以提早知道自己喜歡的課題，而且在準備研究所推甄時也比較不迷惘。說真的，若等到大四才開始思考這些事，真的有點匆促。此外，據說有些碩班推甄的評審委員很注重專題成果，所以如果成績不好或許也可靠優秀的專題脫穎而出。
學生以1~4個人為一組，自行尋找教授討論專題主題，不過有的時候系上也會公佈各教授的參考主題，但都沒有一定。每個老師會不會收專題生或者名額如何也沒有固定，目前上限是專任教授每年6名，合聘教授每年3名。由於是以一個學年計，所以如果上學期已經有指導學生的話下學期名額就會減少。每個教授的領域等資訊可在系上的「系所成員」頁面中取得。
在修習課程前得將專題申請表交至系辦。並不一定找完指導教授就馬上修課，所以一般人通常會提早開始找指導教授，而何時修習課程也沒有一定，筆者甚至有認識大二就修習完專題課程的同學。當然，專題的指導教授不一定會和未來碩班有絕對相關，不過也有些老師會優先收取專題生。
資訊工程專題課程 #  系上分別會在下學期和上學期的時間開設資訊工程專題（一)、資訊工程專題(二)等課程，通常學生會在大三下和大四上修習。這兩堂課都會開兩個班，每年的課程老師也不一定，如果同組學生選到不同班的話系辦會再幫忙湊合。而在上學期、下學期，也有另外開專題(一)、專題(二)。由於比較少人選擇這個時段，故都只會開一班。雖然並沒有規定要在何時修習專題課程，不過未來在選修前必須先通過基礎程式設計課程。
專題課程的上課方式是大家根據自己的研究利用簡報向大家報告，從研究方向、進度、成果展示等等主題不一，是由上課老師來決定。在報告後其他同學或許會提問以及提供一些建議。
專題課程的評分有一定比例由指導教授決定，另外的部份則由課程教授決定，實際比例可能根據不同班而不同。
專題相關比賽獎學金 #  科技部大專學生研究計畫 &amp;ndash; 這是一項可以申請的專題研究補助款，據說不難通過。以個人為單位申請，不過同一計畫只能申請一次，故若由多人進行專題則通常會平分。同一人在同一年度僅能提出一次申請。補助包含了三萬二的人事費以及視需要而定最高一萬五的雜支費，雜支費須以購買研究相關設備為用實報實銷。在申請通過後於七月一日至次年二月底期間進行研究，在這期間如因畢業或其他原因終止研究即喪失補助資格，一般是在寒假時提出申請。實際情形以當年規定為準。
資訊工程系大學部專題競賽 &amp;ndash; 在上學期的時候，系上會有個專題競賽，讓大家有機會在同學面前展示自己的專題，除了榮譽之外，也有一些獎金，決賽約在10月初就會結束。
大學部學生參與鑽石計畫重點領域實驗室，維基夥伴獎金 &amp;ndash; 若是參加特定實驗室的專題計畫則有機會申請獎學金。</description>
    </item>
    
    <item>
      <title>離散數學</title>
      <link>https://shaform.com/csdream/docs/discrete-math/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shaform.com/csdream/docs/discrete-math/</guid>
      <description>離散數學 #  前言 #  離散數學是交大資工大一下的必修課程。離散數學所涵蓋的範圍非常的廣，而正如維基百科所述：「離散數學近幾十年來因為它在電腦科學上的應用備受關注。由於運算對象是離散的，所以電腦科學的數學基礎基本上也是離散的。我們可以說電腦科學的數學語言就是離散數學。」系上使用的教科書是《Discrete Mathematics and Its Applications》，在資工往後的各種數學課程中都可以看到它的影子。一學期的課程中，涵蓋的內容包括邏輯學、集合論、演算法、組合數學、遞迴、數論、圖論、布林代數等等。由於是總括性的課程，很多主題主要是在介紹基本的定義，而不會有太過深入的應用。有些內容也許高中也有提到，但在這門課中會做更嚴謹的推導。
簡介 #  邏輯學是數學推論證明的基礎，是理解數學的基礎之一，在課程中也會帶到 Mathematical induction 等證明的方法，在其後的數學課程中常會使用，若要深入研究，系上也有數理邏輯的課程可供選修。Sets, Graphs, Functions 這些經常被使用的觀念，也會在這堂課裡教授，其中 Graphs 對新生而言可能較不熟悉，卻是往後課程中大量使用的概念。演算法可說是電腦科學的核心之一，也有自己獨立的一門課程。在離散這堂課裡，會介紹演算法的定義，以及幾種簡單的演算法。遞迴的概念在程式設計中非常常見，而在分析演算法效率時，也會用到解遞迴式的技巧。數論主要會介紹和密碼學有密切相關的部份，像是 Chinese remainder theorem, RSA等等。
這是一門重定義、理解、以及證明的數學課，相對於實做導向的程式課或者是計算為主的微積分等課程有很大的不同，在學習時應將每個概念與證明完整理解。筆者自己以及許多同學在學習這堂課時，經常對所學感到不踏實，直到後來學習更深入的課程時才了解離散數學基礎的重要。若有時間，可嘗試閱讀延伸課程之教科書，或許能對離散的學習帶來一些幫助。
參考 #   Mathematics for Computer Science 離散數學 Case Study: How I Got the Highest Grade in my Discrete Math Class UVic Discrete Mathematics Study Guide 《Discrete Mathematics with Applications》 《Discrete and Combinatorial Mathematics: An Applied Introduction》  </description>
    </item>
    
  </channel>
</rss>
